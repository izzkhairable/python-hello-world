name: Build and publish python hello-world

on: [push]

env:
  FILEPATH_PYTHON_MAIN: "src/main.py"
  GH_REGISTRY: "ghcr.io"
  GH_IMAGE_NAME: ${{ github.repository }}
  DH_REGISTRY_IMAGE_NAME: "izzkhair/python-hello-world"

jobs:
  python-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJSON(vars.PYTHON_VERSIONS) }}
    steps:
      - name: Checkout to current branch
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with Ruff
        run: |
          ruff check
        continue-on-error: true

      - name: Test with Coverage Unittest
        run: |
          coverage run -m unittest discover -p '*_test.py'
          coverage report -m --omit="*_test.py"
        continue-on-error: true

      - name: Run python program
        run: |
          echo "-------- RUN 1 --------"
          python ${{ env.FILEPATH_PYTHON_MAIN }}
          echo "-------- RUN 2 --------"
          python ${{ env.FILEPATH_PYTHON_MAIN }}

      - name: Upload packaged python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-hello-world-artifacts-${{ matrix.python-version }}
          path: .

  docker-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    needs:
      - python-build
    strategy:
      matrix:
        python-version: ${{ fromJSON(vars.PYTHON_VERSIONS) }}
    steps:
      - name: Download packaged python artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-hello-world-artifacts-${{ matrix.python-version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Authenticate to github cr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GH_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tags and labels metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            suffix=-${{ matrix.python-version }}
          images: |
              ${{ env.DH_REGISTRY_IMAGE_NAME }}
              ${{ env.GH_REGISTRY }}/${{ env.GH_IMAGE_NAME}}

      - name: Build local docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ env.DH_REGISTRY_IMAGE_NAME }}-local
          labels: ${{ steps.meta.outputs.labels }}
          load: true
          build-args: |
            BASE_DOCKER_IMAGE=${{ matrix.python-version }}

      - name: Run local docker image
        run: |
          docker run --rm ${{ env.DH_REGISTRY_IMAGE_NAME }}-local

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.DH_REGISTRY_IMAGE_NAME }}-local
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: trivy.txt

      - name: Publish Trivy Output to Summary
        run: |
          if [[ -s trivy.txt ]]; then
            {
              echo "### Security Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```${{ env.DH_REGISTRY_IMAGE_NAME }}-local Scan Report'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi

#      - name: Scan image
#        uses: anchore/scan-action@v3
#        with:
#          image: "localbuild/testimage:latest"

#      - name: Scan container for vulnerabilities
#        uses: crazy-max/ghaction-container-scan@v3
#        with:
#          image: izzkhair/python-hello-world:main-${{ matrix.python-version }}
#
#      - name: Run docker image
#        uses: addnab/docker-run-action@v3
#        with:
#          image: izzkhair/python-hello-world:main-${{ matrix.python-version }}
#          run: python ${{ env.FILEPATH_PYTHON_MAIN }}

      - name: Push docker image to docker hub and github cr
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BASE_DOCKER_IMAGE=${{ matrix.python-version }}

      - name: Generate artifact attestation
        id: attest-github-cr
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.GH_REGISTRY }}/${{ env.GH_IMAGE_NAME}}-${{ matrix.python-version }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: false
